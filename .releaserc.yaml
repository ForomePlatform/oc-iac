branches: ['main',{ "name": "dev", "prerelease": true }]
ci: true
debug: false
dryRun: false
# repositoryUrl: https://github.com/urltorepo
tagFormat: '${version}'

# packageName: iac
# Global plugin options (will be passed to all plugins)
preset: 'conventionalcommits'
# gitlabUrl: 'https://gitlab.com'

# it possible to set slack or mattermost incoming-hook-url
# slackWebhook: 'env(SLACK_WEBHOOK)'


###
# Setup plugins:
#   https://github.com/semantic-release/semantic-release/blob/caribou/docs/usage/plugins.md
###

# Responsible for verifying conditions necessary to proceed with the release:
# configuration is correct, authentication token are valid, etc...
verifyConditions:
  - '@semantic-release/changelog'
    # Verify the presence and the validity of the configuration
  - '@semantic-release/git'
    # Verify the presence and the validity of the Git authentication
    # and release configuration
  # - '@semantic-release/gitlab'
    # Verify the presence and the validity of the GitLab authentication
    # and release configuration
  # - 'semantic-release-slack-bot'
    # Verify that the environment variable SLACK_WEBHOOK has been defined

# Responsible for determining the type of the next release (major, minor or patch).
# If multiple plugins with a analyzeCommits step are defined, the release type will be
# the highest one among plugins output.
# Look details at: https://github.com/semantic-release/commit-analyzer#configuration
analyzeCommits:
  - path: '@semantic-release/commit-analyzer'
    # Determine the type of release by analyzing commits with conventional-changelog
    releaseRules:
      - breaking: true
        release: major
      - type: build     # Changes that affect the build system or external dependencies
                        # (example scopes: gulp, broccoli, npm)
        release: patch
      - type: chore     # Other changes that don't modify src or test files
        release: false
      - type: ci        # Changes to our CI configuration files and scripts
        release: false
      - type: docs      # Documentation only changes
        release: patch
      - type: feat      # A new feature
        release: minor
      - type: fix       # A bug fix
        release: patch
      - type: perf      # A code change that improves performance
        release: patch
      - type: refactor  # A code change that neither fixes a bug nor adds a feature
        release: false
      - type: revert    # Reverts a previous commit
        release: patch
      - type: style     # Changes that do not affect the meaning of the code
                        # (white-space, formatting, missing semi-colons, etc)
        release: false
      - type: test      # Adding missing tests or correcting existing tests
        release: false

# Responsible for generating the content of the release note.
# If multiple plugins with a generateNotes step are defined,
# the release notes will be the result of the concatenation of each plugin output.
generateNotes:
  - path: '@semantic-release/release-notes-generator'
    writerOpts:
      groupBy: 'type'
      commitGroupsSort: 'title'
      commitsSort: 'header'
    linkCompare: true
    linkReferences: true
    parserOpts:
      # detect JIRA issues in merge commits
      mergePattern: "^Merge branch '(.*)' into (.*)$"
      mergeCorrespondence: ['branch_src', 'branch_dst']
    presetConfig:
      types:  # looks like it only works with 'conventionalcommits' preset
        - type: 'build'
          section: '🛺 CI/CD'
          hidden: false
        - type: 'chore'
          section: 'Other'
          hidden: false
        - type: 'ci'
          section: '🛺 CI/CD'
          hidden: false
        - type: 'docs'
          section: '📔 Docs'
          hidden: false
        - type: 'example'
          section: '📝 Examples'
          hidden: false
        - type: 'feat'
          section: '🚀 Features'
          hidden: false
        - type: 'fix'
          section: '🛠 Fixes'
          hidden: false
        - type: 'perf'
          section: '⏩ Performance'
        - type: 'refactor'
          section: ':scissors: Refactor'
          hidden: false
        - type: 'revert'
          section: '🙅‍♂️ Reverts'
        - type: 'style'
          section: '💈 Style'
        - type: 'test'
          section: '🧪 Tests'
          hidden: false

# Responsible for preparing the release, for example creating or updating files
# such as package.json, CHANGELOG.md, documentation or compiled assets
# and pushing a commit.
prepare:
  # - path: '@semantic-release/exec'
  #   # Execute shell command to set package version
  #   cmd: './deployment/version-plaintext-set.sh ${nextRelease.version}'
  # - path: '@semantic-release/exec'
  #   cmd: './deployment/version-oas-set.sh ${nextRelease.version} openapi.yaml'
  # - path: '@semantic-release/exec'
  #   verifyReleaseCmd: "echo ${nextRelease.version} > VERSION.txt"
  - path: '@semantic-release/changelog'
    # Create or update the changelog file in the local project repository
  - path: '@semantic-release/git'
    # Push a release commit and tag, including configurable files
    message: 'RELEASE: ${nextRelease.version}'
    assets: ['CHANGELOG.md']

# Responsible for publishing the release.
publish:
  - path: '@semantic-release/github'
    # Publish a GitLab release
    #  (https://docs.gitlab.com/ce/user/project/releases/index.html#add-release-notes-to-git-tags)

success:
  # - path: 'semantic-release-slack-bot'
  #   notifyOnSuccess: true
  #   markdownReleaseNotes: true
  #   onSuccessTemplate:
  #     channel: 'infra_release'
  #     text: "A new version of $package_name with version `$npm_package_version` has been released"
  #     attachments:
  #       - color: '#00c100'
  #         title: '$package_name'
  #         title_link: '$repo_url'
  #         text: '$release_notes'
  #         footer: 'version: $npm_package_version'


fail: false
  # - path: 'semantic-release-slack-bot'
  #   # publish a message about failure to a slack channel
  #   notifyOnFail: true
